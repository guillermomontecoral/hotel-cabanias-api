// <auto-generated />
using System;
using Hotel.LogicaAccesoDatos.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hotel.LogicaAccesoDatos.Migrations
{
    [DbContext(typeof(HotelContext))]
    partial class HotelContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hotel.LogicaNegocio.Entidades.TopesDescripcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("TopesDescripciones");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Cabanha", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CantMaxPersonas")
                        .HasColumnType("int");

                    b.Property<bool>("HabilitadaParaReservas")
                        .HasColumnType("bit");

                    b.Property<int>("IdTipoCabanha")
                        .HasColumnType("int");

                    b.Property<bool>("Jacuzzi")
                        .HasColumnType("bit");

                    b.Property<int>("NumHabitacion")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoCabanha");

                    b.HasIndex(new[] { "NumHabitacion" }, "INX_NumHabitacion")
                        .IsUnique();

                    b.ToTable("Cabanhas");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Mantenimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CostoMantenimiento")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("IdCabanha")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCabanha");

                    b.ToTable("Mantenimientos");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.TipoCabanha", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("CostoPorHuesped")
                        .IsRequired()
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.ToTable("TipoCabanhas");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "INX_EmailUsuario")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Hotel.LogicaNegocio.Entidades.TopesDescripcion", b =>
                {
                    b.OwnsOne("Hotel.LogicaNegocio.Entidades.ValueObjects.TopesDescripcion.NombreTopeDescripcion", "NombreTope", b1 =>
                        {
                            b1.Property<int>("TopesDescripcionId")
                                .HasColumnType("int");

                            b1.Property<string>("Nombre")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TopesDescripcionId");

                            b1.ToTable("TopesDescripciones");

                            b1.WithOwner()
                                .HasForeignKey("TopesDescripcionId");
                        });

                    b.OwnsOne("Hotel.LogicaNegocio.Entidades.ValueObjects.TopesDescripcion.RangoTopesDescripcion", "Rangos", b1 =>
                        {
                            b1.Property<int>("TopesDescripcionId")
                                .HasColumnType("int");

                            b1.Property<int>("Max")
                                .HasColumnType("int");

                            b1.Property<int>("Min")
                                .HasColumnType("int");

                            b1.HasKey("TopesDescripcionId");

                            b1.ToTable("TopesDescripciones");

                            b1.WithOwner()
                                .HasForeignKey("TopesDescripcionId");
                        });

                    b.Navigation("NombreTope")
                        .IsRequired();

                    b.Navigation("Rangos")
                        .IsRequired();
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Cabanha", b =>
                {
                    b.HasOne("LogicaNegocio.Entidades.TipoCabanha", "TipoCabanha")
                        .WithMany()
                        .HasForeignKey("IdTipoCabanha")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Hotel.LogicaNegocio.Entidades.ValueObjects.Cabanha.DescripcionCabanha", "Descripcion", b1 =>
                        {
                            b1.Property<int>("CabanhaId")
                                .HasColumnType("int");

                            b1.Property<string>("Descripcion")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CabanhaId");

                            b1.ToTable("Cabanhas");

                            b1.WithOwner()
                                .HasForeignKey("CabanhaId");
                        });

                    b.OwnsOne("Hotel.LogicaNegocio.Entidades.ValueObjects.Cabanha.NombreCabanha", "Nombre", b1 =>
                        {
                            b1.Property<int>("CabanhaId")
                                .HasColumnType("int");

                            b1.Property<string>("Nombre")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)")
                                .HasColumnName("Value");

                            b1.HasKey("CabanhaId");

                            b1.HasIndex("Nombre")
                                .IsUnique();

                            b1.ToTable("Cabanhas");

                            b1.WithOwner()
                                .HasForeignKey("CabanhaId");
                        });

                    b.OwnsMany("Hotel.LogicaNegocio.Entidades.Foto", "MisFotos", b1 =>
                        {
                            b1.Property<int>("IdCabanha")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("NombreFoto")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Secuenciador")
                                .HasColumnType("int");

                            b1.HasKey("IdCabanha", "Id");

                            b1.ToTable("FotosCabanhas");

                            b1.WithOwner("MiCabanha")
                                .HasForeignKey("IdCabanha");

                            b1.Navigation("MiCabanha");
                        });

                    b.Navigation("Descripcion")
                        .IsRequired();

                    b.Navigation("MisFotos");

                    b.Navigation("Nombre")
                        .IsRequired();

                    b.Navigation("TipoCabanha");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Mantenimiento", b =>
                {
                    b.HasOne("LogicaNegocio.Entidades.Cabanha", "Cabanha")
                        .WithMany("MisMantenimientos")
                        .HasForeignKey("IdCabanha")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Hotel.LogicaNegocio.Entidades.ValueObjects.Mantenimiento.DescripcionMantenimiento", "Descripcion", b1 =>
                        {
                            b1.Property<int>("MantenimientoId")
                                .HasColumnType("int");

                            b1.Property<string>("Descripcion")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MantenimientoId");

                            b1.ToTable("Mantenimientos");

                            b1.WithOwner()
                                .HasForeignKey("MantenimientoId");
                        });

                    b.OwnsOne("Hotel.LogicaNegocio.Entidades.ValueObjects.Mantenimiento.FechaMantenimiento", "Fecha", b1 =>
                        {
                            b1.Property<int>("MantenimientoId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Fecha")
                                .HasColumnType("datetime2");

                            b1.HasKey("MantenimientoId");

                            b1.ToTable("Mantenimientos");

                            b1.WithOwner()
                                .HasForeignKey("MantenimientoId");
                        });

                    b.OwnsOne("Hotel.LogicaNegocio.Entidades.ValueObjects.Mantenimiento.RealizadoPorMantenimiento", "RealizadoPor", b1 =>
                        {
                            b1.Property<int>("MantenimientoId")
                                .HasColumnType("int");

                            b1.Property<string>("Nombre")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MantenimientoId");

                            b1.ToTable("Mantenimientos");

                            b1.WithOwner()
                                .HasForeignKey("MantenimientoId");
                        });

                    b.Navigation("Cabanha");

                    b.Navigation("Descripcion")
                        .IsRequired();

                    b.Navigation("Fecha")
                        .IsRequired();

                    b.Navigation("RealizadoPor")
                        .IsRequired();
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.TipoCabanha", b =>
                {
                    b.OwnsOne("Hotel.LogicaNegocio.Entidades.ValueObjects.TipoCabanha.DescripcionTipoCabanha", "Descripcion", b1 =>
                        {
                            b1.Property<int>("TipoCabanhaId")
                                .HasColumnType("int");

                            b1.Property<string>("Descripcion")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TipoCabanhaId");

                            b1.ToTable("TipoCabanhas");

                            b1.WithOwner()
                                .HasForeignKey("TipoCabanhaId");
                        });

                    b.OwnsOne("Hotel.LogicaNegocio.Entidades.ValueObjects.TipoCabanha.NombreTipoCabanaha", "Nombre", b1 =>
                        {
                            b1.Property<int>("TipoCabanhaId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)")
                                .HasColumnName("Value");

                            b1.HasKey("TipoCabanhaId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("TipoCabanhas");

                            b1.WithOwner()
                                .HasForeignKey("TipoCabanhaId");
                        });

                    b.Navigation("Descripcion")
                        .IsRequired();

                    b.Navigation("Nombre")
                        .IsRequired();
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Cabanha", b =>
                {
                    b.Navigation("MisMantenimientos");
                });
#pragma warning restore 612, 618
        }
    }
}
